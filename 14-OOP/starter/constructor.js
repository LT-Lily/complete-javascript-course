// CONSTRUCTOR | PROTOTYPES
'use strict';

const Person = function (firstName, birthYear) {
  // Instance properties (each instance created will have these properties):
  this.firstName = firstName;
  this.birthYear = birthYear;
  // console.log(this); // Person {}

  // ‚ùåüëéNever create a method inside a constructor function. Each instance created would need to carry this function.
  // üëâSolution: USE üë•PROTOTYPAL INHERITANCE instead. - Person.prototype.calcAge
  /* ‚ùåthis.calcAge = function () {
    console.log(2037 - this.birthYear);
  }; ‚ùå*/
};

const lily = new Person('Lily', 1995);
const nobu = new Person('Nobu', 1986);
const wasabiChuan = 'wasabi';

console.log(lily);
console.log(lily instanceof Person); //true
console.log(wasabiChuan instanceof Person); //true
// Person { firstName: 'Lily', birthYear: 1995 }

// üÜï new calls Person function
// 4 Steps behind the scenes when calling with "new"
// 1. ‚û° new {} is created
// 2. ‚û° function is called üìû. "this" is set to newly created {object}. (in the execution c. of the Person function "this" -points to-> new {object})
// 3. ‚û° new {} created is  üîólinked to prototype.
// Where does .__proto__ come from? HERE! (#3) Step 3 creates __proto__
// 4. ‚û° the {object}(function) created in the beginning is automatically returned‚Ü©  from the constructor function. (function automatically return {})

// Use a constructor function to build an OBJECT using a FUNCTION
// A constructor func() is a normal function
// diff b/w  normal function vs constructor function : constructor function called with "new" operator
// can then use constructor function to create as many objectobjects with this function.
// an () => { } DOES NOT WORK AS A FUNCTION CONSTRUCTOR. It does not have own "this" k.w. we need "this."

// JS does not have Classes. Constructor functions have been used since the beginning to "simulate" classes to create objects..
// Constructor functions are not a feature of JS. It is a PATTERN ‚ôícreated by users.

///////////////
// PROTOTYPES
// Prototypal inheritance and delegations (see prev lectures): In summary:
/* 
  Each and every function in JS has a property called PROTOTYPE. This includes constructor functions.
  every OBJECT created by a certain CONSTRUCTOR function will get access to all the methods and properties that we define on the prototype property.
*/
//Syntax: Constructorfunction.property
// Person.prototype; <-- this is an object
// All OBJECTS created by constructor function will INHERIT(HAVE ACCESS) to all the methods that are defined on this prototype property.
console.log(typeof Person.prototype); // object
console.log(Person.prototype); // object
/* 
{constructor: ∆í}
calcAge: ∆í () <--!!!
constructor: ∆í (firstName, birthYear)
__proto__: Object */

// ‚úîüëç
Person.prototype.calcAge = function () {
  console.log(2037 - this.birthYear);
}; // this is set to the object that is calling the method. lily and nobu.

lily.calcAge();
nobu.calcAge();

// Why does this work?
// Any object always has access to properties and methods from its. The prototype of lily and nobu is Person.prototype.

// Check what is the prototype of an object:
// object.__proto__

// __proto__ property is created (in step 3 of "new") and set to the value of prototype property of the function that is being called.
// This is how JS knows internally that "lily" OBJECT is connected to Person.prototype.

// IMPORTANT ‚ùó Understand What is __proto__, prototype of the constructor, how they are all linked
console.log(lily);
/* 
Person {firstName: "Lily", birthYear: 1995}
birthYear: 1995
firstName: "Lily"
__proto__: <------------SEE HERE üëÄ
calcAge: ∆í ()                        ‚≠ê
constructor: ∆í (firstName, birthYear)‚≠ê
__proto__: Object                    ‚≠ê
 */

console.log(lily.__proto__); // ‚≠êget the prototype of the object
console.log(lily.__proto__ === Person.prototype); //true
/* üì§ OUTPUT: the prototype of the lily OBJECT is ‚≠êthe prototype property of the constructor function.‚≠ê
{calcAge: ∆í, constructor: ∆í}
calcAge: ∆í ()
constructor: ∆í (firstName, birthYear)
__proto__: Object 
*/

// Confusing: ‚Åâ‚ùî‚ùó‚ùó‚ùì
/*  Person.prototype ‚ùåis not the PROTOTYPE of PERSON */
/*  Person.prototype ‚≠ïis used AS the PROTOTYPE for all the OBJECTS that are created with the Person constructor function */

// Is this a prototype of another object?
// Understand what is the PROTOTYPE of WHAT OBJECT
console.log(Person.prototype.isPrototypeOf(lily)); //true
console.log(Person.prototype.isPrototypeOf(Person)); //false
// think of .prototype as .prototypeOfLinkedObjects instead

// üëâüëâüëâ 207. 2Ô∏è‚É£0Ô∏è‚É£7Ô∏è‚É£Set PROPERTIES üè† on a PROTOTYPE
Person.prototype.species = 'Homosapien';
console.log(lily, nobu);
// Not the OBJECT's (lily and nobu's) OWN properties. INHERITED.
console.log(lily.hasOwnProperty('firstName')); // ‚úîtrue
console.log(lily.hasOwnProperty('species')); // false üôÖ‚Äç‚ôÄÔ∏è <-- not inside lily OBJ. simply inherited (has access because of its PROTOTYPE).
/*
 Person {firstName: "Lily", birthYear: 1995}
birthYear: 1995
firstName: "Lily"
__proto__: ‚≠ê
calcAge: ∆í ()
species: "Homosapien" üëàüëàüëàüëàüëÄüÜïüè†
constructor: ∆í (firstName, birthYear)
__proto__: Object 
*/
/* 
Person {firstName: "Nobu", birthYear: 1986}
birthYear: 1986
firstName: "Nobu"
__proto__:‚≠ê
calcAge: ∆í ()
species: "Homosapien" üëàüëàüëàüëàüëÄüÜïüè†
constructor: ∆í (firstName, birthYear)
__proto__: Object 
*/

// üëâüëâüëâ 2Ô∏è‚É£0Ô∏è‚É£8Ô∏è‚É£ PROTOTYPAL INHERITANCE / DELEGATION
/* 
If a function cannot be found in an OBJECT itself, JS will look into the __proto__
lily.calcAge() <- the lily OBJECT inherited the calcAge method from its PROTOTYPE /
it delegated the functionality --> to its prototype.
‚ûïAdvanages: 
 üöÖ‚è≤üëç Many objects can be created. The function is only created ONCE.


 lily.calcAge () 

 lily is connected to a prototype. 
 ü¶∏‚Äç‚ôÄÔ∏èü¶æThe ability of üëÄlooking up methods and properties in a prototype = PROTOTYPE CHAIN ‚õìüîóüîóüîó

 lily üì¶OBJ üîó PROTOTYPE ==> PROTOTYPE CHAIN 
 */

//  THE PROTOTYPE CHAIN ‚õìüîóüîóüîó
// Series of links between objects, linked through PROTOTYPES. (Similar to the SCOPE chain)
/* 
‚ùó EVERY OBJüì¶ in JS HAS A PROTOTYPE.
Person.prototype is an OBJüì¶ 
üëâ Person.prototype HAS A PROTOTYPE.
What is the PROTOTYPE of Person.prototype?
 ‚≠êObject.prototype
 (SYNTAX reminder -CONSTRUCTORüë∑‚Äç‚ôÇÔ∏èfunction.property)
  üëâ CONSTRUCTOR FUNCTION = Object (* Usually the TOP üóªof chainüîó --> PROTOTYPE of OBJüì¶ = NULL‚õî --> üîöEND of PROTOTYPE CHAIN ‚õìüîó )
  logic üß†: lily is built with Person()üë∑‚Äç‚ôÇÔ∏è  üëâ üë∑‚Äç‚ôÇÔ∏è() = Person
 Why?
 Person.prototype is just a simple object. It was built by the BUILT INüîß CONSTRUCTORüë∑‚Äç‚ôÇÔ∏èfunction. 
 The Constructor function is the function called behind the scenes üé≠ when creating an object literal: ü•ì {...}ü•ì === new Object(.....)
 ü•ì{} ü•ìcurly braces are a shortcut to writing a new object

*/

/* 
  The Prototype Chain is similar to the Scope chain -

SCOPE chain = whenever JS can find a certian variable in a certain scope ---> looks up  NEXT ‚è≠ VAR in the scope chain üîóüî≠üëÄüîç
 -> works with scopes

PROTOTYPE CHAIN - whenever JS can find a certain PROPERTY or METHOD in an OBJECT --> üî≠üëÄüîç looks up NEXT ‚è≠ prototype in the PROTOTYPEüîó to see if it can find it there üîç
 -> properties, methods, objects
*/

// Method lookup üî≠üëÄüîç
// lily.hasOwnProperty("name")
// JS will find called method on the method itself.
// .hasOwnProperty <- is it in the lily object?
// No --> is it in lily's __proto__? --> NO --> ‚¨ÜüëÜ‚Üó moves up PROTOTYPE CHAIN.
// NEXT ‚è≠: What is the PROTOTYPE of Person.prototype? Object.prototype
// Object has .hasOwnProperty
// * Notes object is INHERITED from Object.prototype through the PROTOTYPE CHAIN

// Gets interested when adding INHERITANCE OBJ<-inherits->OBJ
// Eg. Student<-inherits from Person
